{"version":3,"sources":["features/common/components/Header.tsx","hooks.ts","api.ts","features/todos/todosSlice.ts","features/todos/components/TodoListItem.tsx","features/todos/components/TodoList.tsx","features/todos/components/NewTodoInput.tsx","features/todos/components/Todo.tsx","features/common/commonSlice.ts","features/common/components/Errors.tsx","features/common/components/Main.tsx","App.tsx","reportWebVitals.ts","store.ts","index.tsx"],"names":["Header","alt","src","useAppDispatch","useDispatch","useSelector","Method","objectInterpolate","source","values","Object","entries","k","v","replace","toString","createApiThunk","action","resource","method","resource_params","createAsyncThunk","params","thunkApi","a","GET","requestHeaders","Headers","set","headers","res","POST","PUT","body","JSON","stringify","fetch","fetch_response","ok","json","api_response","data","rejectWithValue","error","TodoAction","api","initialState","items","currentAction","Loading","getTodos","addTodo","updateTodo","clearTodos","DELETE","removeTodo","todos","createSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","Idle","payload","rejected","Adding","push","Updating","item","find","i","id","description","completed","Clearing","Removing","filter","TodoListItem","props","dispatch","className","type","checked","onChange","Button","onClick","TodoList","useEffect","Spinner","animation","role","length","map","NewTodoInput","useState","validated","setValidated","initialValue","onEnter","undefined","value","setValue","handleChange","e","target","Number","setDefault","hasChanged","bind","onKeyPress","code","useFormInput","onSubmit","formRef","useRef","current","checkValidity","submitButton","variant","disabled","as","size","Form","ref","noValidate","event","preventDefault","Row","Col","Group","controlId","Control","placeholder","required","Feedback","Todo","clearButton","Container","errorId","common","errors","clearError","actions","Errors","toasts","reverse","Toast","autohide","delay","onClose","color","Body","ToastContainer","position","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","commonReducer","todoReducer","middleware","getDefaultMiddleware","devTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2cd14a34.chunk.js","sourcesContent":["import React, {FunctionComponent} from \"react\";\r\n\r\nexport const Header:FunctionComponent<any> = () => <img alt=\"LiveView Technologies\" src={\"/LVLogo_small.png\"}/>;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './store'\r\nimport { useState, ChangeEvent, KeyboardEvent} from \"react\";\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\n\r\nexport function useFormInput(initialValue:any, onEnter:undefined | (() => void) = undefined ) {\r\n    const [value, setValue] = useState(initialValue);\r\n\r\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if(e && e.target) {\r\n            if (typeof initialValue == \"number\") {\r\n                setValue(Number(e.target.value));\r\n            } else {\r\n                setValue(e.target.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleKeyPress = (e:KeyboardEvent<HTMLInputElement>) => {\r\n        if (onEnter && (e.code === \"Enter\" || e.code === \"NumpadEnter\")) {\r\n            onEnter();\r\n        }\r\n    }\r\n\r\n    const setDefault = () => {\r\n        setValue(initialValue);\r\n    }\r\n\r\n    return {\r\n        value,\r\n        set: setValue,\r\n        setDefault: setDefault,\r\n        hasChanged : () => value !== initialValue,\r\n        bind : {\r\n            value,\r\n            onChange: handleChange,\r\n            onKeyPress: handleKeyPress\r\n        }\r\n    }\r\n}\r\n\r\nexport function useCheckboxInput(initialValue:boolean, onChange:undefined | ((value:boolean) => void) = undefined) {\r\n    const [value, setValue] = useState(initialValue);\r\n\r\n    function handleChange(e: ChangeEvent<HTMLInputElement>) {\r\n        if(e?.target) {\r\n            if (e.target.checked !== value) {\r\n                setValue(e.target.checked);\r\n                if (typeof onChange == \"function\") {\r\n                    onChange(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function setDefault() {\r\n        setValue(initialValue);\r\n    }\r\n\r\n    return {\r\n        value,\r\n        set: setValue,\r\n        setDefault: setDefault,\r\n        hasChanged : () => value !== initialValue,\r\n        bind : {\r\n            checked: value,\r\n            onChange: handleChange\r\n        }\r\n    }\r\n}","import {createAsyncThunk} from \"@reduxjs/toolkit\";\r\n\r\nexport enum Method {\r\n    GET = \"GET\",\r\n    PUT = \"PUT\",\r\n    POST = \"POST\",\r\n    DELETE = \"DELETE\"\r\n}\r\n\r\ninterface Error {\r\n    error: string\r\n}\r\n\r\ninterface Result<T> {\r\n    data: T\r\n}\r\n\r\ntype Response<T> = Result<T> | Error;\r\n\r\nfunction isResult<T>(response:Response<T>): response is Result<T> {\r\n    return 'data' in response;\r\n}\r\n\r\nfunction objectInterpolate(source:string, values:object) {\r\n    for (const [k,v] of Object.entries(values)) {\r\n        source = source.replace(\"{\" + k + \"}\", v.toString())\r\n    }\r\n    return source;\r\n}\r\n\r\n// R = Return type, P = parameter type, E = error type\r\nexport function createApiThunk<R,P extends object | void>(action:string, resource:string, method?:Method, resource_params?: RequestInit) {\r\n    return  createAsyncThunk<R,P, { rejectValue: Error }>(action, async (params, thunkApi) => {\r\n        resource_params = resource_params ?? { };\r\n        resource_params.method = method ?? Method.GET;\r\n\r\n        const requestHeaders: HeadersInit = new Headers();\r\n        requestHeaders.set('Content-Type', 'application/json');\r\n        resource_params.headers = requestHeaders;\r\n\r\n        let res = resource;\r\n        // interpolate any `{}` value in the parameter\r\n        if(params) {\r\n            res = objectInterpolate(res, params);\r\n\r\n            // We only include the params as body for POST and PUT.\r\n            // For non-body methods like DELETE where we want to take a param so we can do interpolation on the\r\n            // url, but we don't want to unnecessarily send a body\r\n            if(resource_params.method === Method.POST || resource_params?.method === Method.PUT) {\r\n                resource_params.body = JSON.stringify(params);\r\n            }\r\n        }\r\n\r\n        const fetch_response = await fetch(res, resource_params);\r\n        if (fetch_response.ok) {\r\n            const api_response = (await fetch_response.json()) as Response<R>;\r\n            if (isResult(api_response)) {\r\n                return api_response.data;\r\n            } else {\r\n                return thunkApi.rejectWithValue(api_response as Error);\r\n            }\r\n        }\r\n        return thunkApi.rejectWithValue({ error: \"API Error\"} as Error);\r\n    });\r\n}\r\n\r\n// throw this here for now\r\nexport const api = (resource:string) => \"http://localhost:8000\" + resource;","import {createSlice} from \"@reduxjs/toolkit\";\r\nimport {Todo} from \"./model\";\r\nimport {api, createApiThunk, Method} from \"../../api\";\r\n\r\ntype TodoId = number;\r\n\r\nexport enum TodoAction {\r\n    Idle,\r\n    Loading,\r\n    Adding,\r\n    Clearing,\r\n    Removing,\r\n    Updating\r\n}\r\n\r\ninterface TodoState {\r\n    currentAction: TodoAction,\r\n    items:Todo[]\r\n}\r\n\r\ninterface CreateRequest {\r\n    description:string\r\n}\r\n\r\ninterface UpdateRequest {\r\n    id: TodoId,\r\n    description?: string,\r\n    completed?: boolean\r\n}\r\n\r\ninterface RemoveRequest {\r\n    id: TodoId\r\n}\r\n\r\ninterface ClearResult {\r\n    total: TodoId\r\n}\r\n\r\ninterface RemoveResult {\r\n    id: TodoId;\r\n}\r\n\r\nconst initialState = { items: [ ], currentAction: TodoAction.Loading } as TodoState;\r\n\r\nexport const getTodos = createApiThunk<Todo[],void>('todos/fetchTodos',api(\"/api/todo\"));\r\nexport const addTodo = createApiThunk<Todo,CreateRequest>('todos/addTodo', api(\"/api/todo\"), Method.POST );\r\nexport const updateTodo = createApiThunk<Todo, UpdateRequest>('todos/updateTodo', api('/api/todo/{id}'), Method.PUT);\r\nexport const clearTodos = createApiThunk<ClearResult,void>('todos/clearTodos', api(\"/api/todo\"), Method.DELETE);\r\nexport const removeTodo = createApiThunk<RemoveResult,RemoveRequest>('todos/removeTodo', api(\"/api/todo/{id}\"), Method.DELETE);\r\n\r\nexport const todos = createSlice({\r\n    name: 'todo',\r\n    initialState,\r\n    reducers: {\r\n    },\r\n    extraReducers : builder => {\r\n        builder.addCase(getTodos.pending, (state, action) => {\r\n            state.currentAction = TodoAction.Loading;\r\n        });\r\n        builder.addCase(getTodos.fulfilled, (state, action) => {\r\n            state.currentAction = TodoAction.Idle;\r\n            state.items = action.payload;\r\n        });\r\n        builder.addCase(getTodos.rejected, (state, action) => {\r\n            state.currentAction = TodoAction.Idle;\r\n        });\r\n\r\n        builder.addCase(addTodo.pending, (state, action) => {\r\n            state.currentAction = TodoAction.Adding;\r\n        });\r\n        builder.addCase(addTodo.fulfilled, (state, action) => {\r\n            state.currentAction = TodoAction.Idle;\r\n            state.items.push(action.payload)\r\n        });\r\n        builder.addCase(addTodo.rejected, (state, action) => {\r\n            state.currentAction = TodoAction.Idle;\r\n        });\r\n\r\n        builder.addCase(updateTodo.pending, (state, action) => {\r\n            state.currentAction = TodoAction.Updating;\r\n        });\r\n        builder.addCase(updateTodo.fulfilled, (state, action) => {\r\n            state.currentAction = TodoAction.Idle;\r\n            let item = state.items.find(i => i.id === action.payload.id);\r\n            if (item) {\r\n                item.description = action.payload.description;\r\n                item.completed = action.payload.completed;\r\n            }\r\n        });\r\n        builder.addCase(updateTodo.rejected, (state, action) => {\r\n            state.currentAction = TodoAction.Idle;\r\n        });\r\n\r\n        builder.addCase(clearTodos.pending, (state, action) => {\r\n            state.currentAction = TodoAction.Clearing;\r\n        });\r\n        builder.addCase(clearTodos.fulfilled, (state, action) => {\r\n            state.currentAction = TodoAction.Idle;\r\n            state.items = [];\r\n        });\r\n        builder.addCase(clearTodos.rejected, (state, action) => {\r\n            state.currentAction = TodoAction.Idle;\r\n        });\r\n\r\n        builder.addCase(removeTodo.pending, (state, action) => {\r\n            state.currentAction = TodoAction.Removing;\r\n        });\r\n        builder.addCase(removeTodo.fulfilled, (state, action) => {\r\n            state.currentAction = TodoAction.Idle;\r\n            state.items = state.items.filter(i => i.id !== action.payload.id)\r\n        });\r\n        builder.addCase(removeTodo.rejected, (state, action) => {\r\n            state.currentAction = TodoAction.Idle;\r\n        });\r\n    }\r\n});\r\n\r\nexport default todos.reducer","import React, {FunctionComponent} from \"react\";\r\nimport {Button} from \"react-bootstrap\";\r\nimport {useAppDispatch} from \"../../../hooks\";\r\nimport {removeTodo, updateTodo} from \"../todosSlice\";\r\n\r\ninterface TodoListItemProps {\r\n    id: number,\r\n    description: string,\r\n    completed:boolean,\r\n}\r\n\r\nexport const TodoListItem:FunctionComponent<TodoListItemProps> = (props) => {\r\n    let dispatch = useAppDispatch();\r\n\r\n    const onChange = () => dispatch(updateTodo({ id: props.id, completed: !props.completed}));\r\n    const onRemove = () => dispatch(removeTodo( { id: props.id }));\r\n\r\n    return <li className=\"list-group-item d-flex justify-content-between align-items-start\">\r\n        <input className=\"checkbox form-check-input\" type=\"checkbox\" checked={props.completed} onChange={onChange}/>\r\n        <div className={\"ms-2 me-auto \" + (props.completed ? 'task-completed' : \"\")}>{props.description}</div>\r\n        <Button className=\"btn-close btn-close-custom\" onClick={onRemove}/>\r\n    </li>;\r\n}","import React, {FunctionComponent, useEffect} from \"react\";\r\nimport {useAppDispatch} from \"../../../hooks\";\r\nimport {getTodos, TodoAction} from \"../todosSlice\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../store\";\r\nimport {TodoListItem} from \"./TodoListItem\";\r\nimport {Spinner} from \"react-bootstrap\";\r\n\r\nexport const TodoList:FunctionComponent<any> = () => {\r\n    const dispatch = useAppDispatch();\r\n    const items = useSelector((state:RootState) => state.todos.items);\r\n    const currentAction = useSelector( (state:RootState) => state.todos.currentAction);\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodos());\r\n    }, [dispatch])\r\n\r\n    let list;\r\n\r\n    if (currentAction === TodoAction.Loading) {\r\n        list = <div><Spinner animation=\"border\" role=\"status\"/>Loading Tasks...</div>\r\n    } else {\r\n        if (items.length > 0 ) {\r\n            list = <ul className=\"task-list\">{items.map(item => <TodoListItem key={item.id} id={item.id} description={item.description} completed={item.completed}/>)}</ul>\r\n        } else {\r\n            list = <div className=\"empty-list\">No Todos</div>\r\n        }\r\n    }\r\n\r\n    return list;\r\n}","import React, {FormEvent, FunctionComponent, useRef, useState} from \"react\";\r\nimport {useAppDispatch, useFormInput} from \"../../../hooks\";\r\nimport {addTodo, TodoAction} from \"../todosSlice\";\r\nimport {Button, Col, Form, Row, Spinner} from 'react-bootstrap';\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../store\";\r\n\r\nexport const NewTodoInput:FunctionComponent<any> = () => {\r\n    let dispatch = useAppDispatch();\r\n\r\n    const [validated, setValidated] = useState(false);\r\n    let description = useFormInput(\"\", onSubmit);\r\n    const formRef = useRef<HTMLFormElement>(null);\r\n    const currentAction = useSelector( (state:RootState) => state.todos.currentAction);\r\n\r\n    function onSubmit() {\r\n        if (formRef?.current?.checkValidity() === true) {\r\n            setValidated(false);\r\n            dispatch(addTodo({description: description.value}));\r\n            description.set(\"\");\r\n        } else {\r\n            setValidated(true);\r\n        }\r\n    }\r\n\r\n    const submitButton = currentAction === TodoAction.Adding ?\r\n        <Button variant=\"primary\" disabled>\r\n            <Spinner\r\n                as=\"span\"\r\n                animation=\"border\"\r\n                size=\"sm\"\r\n                role=\"status\"\r\n                aria-hidden=\"true\"\r\n            />\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n        </Button> :\r\n        <Button variant=\"primary\" type=\"button\" onClick={onSubmit}>Add</Button>;\r\n\r\n\r\n\r\n    return <Form ref={formRef} noValidate validated={validated} onSubmit={(event:FormEvent<HTMLFormElement>) => event.preventDefault() }>\r\n                    <Row>\r\n                       <Col>\r\n                            <Form.Group className=\"mb-3\" controlId=\"formDescription\">\r\n                                <Form.Control type=\"input\" placeholder=\"New Task Description...\" {...description.bind} required />\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    Please provide a todo description.\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>\r\n                       </Col>\r\n                       <Col className=\"col-3 text-end\">\r\n                           {submitButton}\r\n                       </Col>\r\n                    </Row>\r\n                </Form>\r\n}\r\n","import React, {FunctionComponent} from \"react\";\r\nimport {TodoList} from \"./TodoList\";\r\nimport {NewTodoInput} from \"./NewTodoInput\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../store\";\r\nimport {Button, Col, Container, Row} from \"react-bootstrap\";\r\nimport {useAppDispatch} from \"../../../hooks\";\r\nimport {clearTodos} from \"../todosSlice\";\r\n\r\nexport const Todo:FunctionComponent<any> = () => {\r\n    const dispatch = useAppDispatch();\r\n    const todoCount = useSelector( (state:RootState) => state.todos.items.length );\r\n\r\n    // button handler\r\n    const onClick = () => dispatch(clearTodos());\r\n\r\n    const clearButton = todoCount > 0 ?\r\n        <Row className=\"row justify-content-end\">\r\n            <Col className=\"col-3 text-end\">\r\n                <Button className=\"btn btn-danger\" onClick={onClick}>Clear</Button>\r\n            </Col>\r\n        </Row>\r\n        : <></>\r\n\r\n    return  <Container className=\"tasks\">\r\n                <Row className=\"row\">\r\n                    <Col className=\"col\" >\r\n                        <h3>Tasks</h3>\r\n                    </Col>\r\n                </Row>\r\n                <NewTodoInput/>\r\n                <TodoList/>\r\n                {clearButton}\r\n        </Container>;\r\n}","import {createSlice} from \"@reduxjs/toolkit\";\r\nimport {addTodo, getTodos} from \"../todos/todosSlice\";\r\n\r\nlet errorId = 0;\r\n\r\ninterface Error {\r\n    id: number,\r\n    description: string\r\n}\r\n\r\ninterface CommonState {\r\n    errors: Error[]\r\n}\r\n\r\nconst initialState = { errors: [] } as CommonState;\r\n\r\nexport const common = createSlice({\r\n    name: 'common',\r\n    initialState,\r\n    reducers: {\r\n        error: (state, action) => {\r\n            state.errors.push({ id: ++errorId, description: action.payload });\r\n        },\r\n        clearError: (state, action) => {\r\n            state.errors = state.errors.filter( error => error.id !== action.payload)\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(getTodos.rejected, (state, action) => {\r\n            state.errors.push({ id: ++errorId, description: \"Unable to load Todos\" });\r\n        });\r\n        builder.addCase(addTodo.rejected, (state, action) => {\r\n            state.errors.push({ id: ++errorId, description: \"Unable to add Todo\" });\r\n        });\r\n    }\r\n});\r\n\r\n\r\nexport const { error, clearError } = common.actions;\r\nexport default common.reducer","import React, {FunctionComponent} from \"react\"\r\nimport {Toast, ToastContainer} from \"react-bootstrap\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../store\";\r\nimport {useAppDispatch} from \"../../../hooks\";\r\nimport {clearError} from \"../commonSlice\";\r\nimport {BsFillExclamationTriangleFill} from \"react-icons/bs\";\r\n\r\nexport const Errors:FunctionComponent<any> = () => {\r\n    const dispatch = useAppDispatch();\r\n    const errors = useSelector( (state:RootState) => state.common.errors);\r\n\r\n    let currentErrors = [...errors];\r\n    const toasts = currentErrors.reverse().map( error => {\r\n        return <Toast className=\"error-toast\" key={error.id} autohide={true} delay={6000} onClose={() => dispatch(clearError(error.id))}>\r\n                    <Toast.Header>\r\n                        <BsFillExclamationTriangleFill color=\"red\" size=\"2em\" className=\"error-toast-icon\"/>\r\n                        <strong className=\"me-auto\">Error</strong>\r\n                    </Toast.Header>\r\n                    <Toast.Body>{ error.description }</Toast.Body>\r\n                </Toast>\r\n    });\r\n\r\n    return  <ToastContainer position=\"bottom-end\">\r\n    {toasts}\r\n    </ToastContainer>\r\n}","import React, {FunctionComponent} from \"react\"\r\nimport {Todo} from \"../../todos/components/Todo\";\r\nimport {Errors} from \"./Errors\";\r\n\r\nexport const Main:FunctionComponent<any> = () => {\r\n    return <div><Todo/><Errors/></div>\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Header} from \"./features/common/components/Header\";\r\nimport {Main} from \"./features/common/components/Main\"\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Container>\r\n            <Row>\r\n                <Col>\r\n                    <Header/>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col className=\"col-4\">\r\n                    <Main/>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit'\r\nimport todoReducer from \"./features/todos/todosSlice\";\r\nimport commonReducer from \"./features/common/commonSlice\"\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        common: commonReducer,\r\n        todos: todoReducer\r\n    },\r\n    middleware: getDefaultMiddleware(), // includes thunk\r\n    devTools: true\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}