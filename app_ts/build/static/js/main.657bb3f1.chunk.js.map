{"version":3,"sources":["features/common/components/Header.tsx","features/common/components/Main.tsx","hooks.ts","api.ts","features/todos/todosSlice.ts","features/todos/components/TodoListItem.tsx","features/todos/components/TodoList.tsx","features/todos/components/NewTodoInput.tsx","features/todos/components/Todo.tsx","features/common/components/Sidebar.tsx","features/common/commonSlice.ts","features/common/components/Errors.tsx","App.tsx","reportWebVitals.ts","store.ts","index.tsx"],"names":["Header","alt","src","Main","useAppDispatch","useDispatch","useAppSelector","useSelector","Method","objectInterpolate","source","values","Object","entries","k","v","replace","toString","createApiThunk","action","resource","method","resource_params","createAsyncThunk","params","thunkApi","a","GET","requestHeaders","Headers","set","headers","res","POST","PUT","body","JSON","stringify","fetch","fetch_response","ok","json","api_response","data","rejectWithValue","error","TodoAction","api","initialState","items","currentAction","Loading","getTodos","addTodo","updateTodo","clearTodos","DELETE","removeTodo","todos","createSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","Idle","payload","rejected","Adding","push","Updating","item","find","i","id","description","completed","Clearing","Removing","filter","TodoListItem","props","dispatch","CloseButton","IconButton","edge","onClick","ListItem","secondaryAction","ListItemIcon","Checkbox","checked","disableRipple","onChange","ListItemText","primary","className","TodoList","useEffect","Skeleton","variant","width","length","List","disablePadding","map","NewTodoInput","useState","hasError","setHasError","initialValue","onEnter","undefined","value","setValue","handleChange","e","target","Number","setDefault","hasChanged","bind","onKeyPress","code","useFormInput","onSubmit","formRef","useRef","current","checkValidity","Grid","container","spacing","justifyContent","xs","TextField","inputRef","size","required","helperText","LoadingButton","loading","Todo","todoCount","showConfirmDeleteDialog","setShowConfirmDeleteDialog","cancelClearTodoHandler","Box","minWidth","Card","p","Divider","Fab","color","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","autoFocus","Sidebar","errorId","common","errors","clearError","actions","Errors","errorCount","errorInfo","setErrorInfo","setOpen","closeErrorHandler","event","reason","Snackbar","autoHideDuration","TransitionProps","onExited","anchorOrigin","vertical","horizontal","Alert","severity","App","md","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","commonReducer","todoReducer","middleware","getDefaultMiddleware","devTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.657bb3f1.chunk.js","sourcesContent":["import React, {FunctionComponent} from \"react\";\r\n\r\nexport const Header:FunctionComponent = () => <img alt=\"LiveView Technologies\" src={\"./LVLogo_small.png\"}/>;","import React, {FunctionComponent} from \"react\"\r\n\r\nexport const Main:FunctionComponent = () => {\r\n    return <div/>\r\n}","import {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux'\r\nimport type {AppDispatch, RootState} from './store'\r\nimport {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\n\r\n/***\r\n * Custom hook for simpler input handling\r\n * @param initialValue\r\n * @param onEnter - Callback triggered when enter key is pressed.\r\n */\r\nexport function useFormInput(initialValue:any, onEnter:undefined | (() => void) = undefined ) {\r\n    const [value, setValue] = useState(initialValue);\r\n\r\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if(e && e.target) {\r\n            if (typeof initialValue == \"number\") {\r\n                setValue(Number(e.target.value));\r\n            } else {\r\n                setValue(e.target.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleKeyPress = (e:KeyboardEvent<HTMLInputElement>) => {\r\n        if (onEnter && (e.code === \"Enter\" || e.code === \"NumpadEnter\")) {\r\n            onEnter();\r\n        }\r\n    }\r\n\r\n    const setDefault = () => {\r\n        setValue(initialValue);\r\n    }\r\n\r\n    return {\r\n        value,\r\n        set: setValue,\r\n        setDefault: setDefault,\r\n        hasChanged : () => value !== initialValue,\r\n        bind : {\r\n            value,\r\n            onChange: handleChange,\r\n            onKeyPress: handleKeyPress\r\n        }\r\n    }\r\n}","import {createAsyncThunk} from \"@reduxjs/toolkit\";\r\n\r\nexport enum Method {\r\n    GET = \"GET\",\r\n    PUT = \"PUT\",\r\n    POST = \"POST\",\r\n    DELETE = \"DELETE\"\r\n}\r\n\r\ninterface Error {\r\n    error: string\r\n}\r\n\r\ninterface Result<T> {\r\n    data: T\r\n}\r\n\r\ntype Response<T> = Result<T> | Error;\r\n\r\nfunction isResult<T>(response:Response<T>): response is Result<T> {\r\n    return 'data' in response;\r\n}\r\n\r\n/***\r\n * Simple function that will replace all `{key}` tokens in `source` with the corresponding `values[key]` value\r\n * @param source\r\n * @param values\r\n */\r\nfunction objectInterpolate(source:string, values:object) {\r\n    for (const [k,v] of Object.entries(values)) {\r\n        source = source.replace(\"{\" + k + \"}\", v.toString())\r\n    }\r\n    return source;\r\n}\r\n\r\n/***\r\n * Wrapper around createAsyncThunk to fetch from a REST API into a Response\r\n * R - Return Type of API call\r\n * P - Parameter passed to the thunk\r\n *\r\n * @param action - the redux action name\r\n * @param resource - the URL we're querying\r\n * @param method - the HTTP method to use\r\n * @param resource_params - RequestInit object passed to fetch()\r\n */\r\nexport function createApiThunk<R,P extends object | void>(action:string, resource:string, method?:Method, resource_params?: RequestInit) {\r\n    return  createAsyncThunk<R,P, { rejectValue: Error }>(action, async (params, thunkApi) => {\r\n        resource_params = resource_params ?? { };\r\n        resource_params.method = method ?? Method.GET;\r\n\r\n        const requestHeaders: HeadersInit = new Headers();\r\n        requestHeaders.set('Content-Type', 'application/json');\r\n        resource_params.headers = requestHeaders;\r\n\r\n        let res = resource;\r\n        // interpolate any `{}` value in the parameter\r\n        if(params) {\r\n            res = objectInterpolate(res, params);\r\n\r\n            // We only include the params as body for POST and PUT.\r\n            // For non-body methods like DELETE, we want to take a params so we can do interpolation on the\r\n            // url, but we don't want to unnecessarily send a body\r\n            if(resource_params.method === Method.POST || resource_params?.method === Method.PUT) {\r\n                resource_params.body = JSON.stringify(params);\r\n            }\r\n        }\r\n\r\n        const fetch_response = await fetch(res, resource_params);\r\n        if (fetch_response.ok) {\r\n            const api_response = (await fetch_response.json()) as Response<R>;\r\n            if (isResult(api_response)) {\r\n                return api_response.data;\r\n            } else {\r\n                return thunkApi.rejectWithValue(api_response as Error);\r\n            }\r\n        }\r\n        return thunkApi.rejectWithValue({ error: \"API Error\"} as Error);\r\n    });\r\n}\r\n\r\nexport const api = (resource:string) => \"http://localhost:8000\" + resource;","import {createSlice} from \"@reduxjs/toolkit\";\r\nimport {Todo} from \"./model\";\r\nimport {api, createApiThunk, Method} from \"../../api\";\r\n\r\ntype TodoId = number;\r\n\r\nexport enum TodoAction {\r\n    Idle,\r\n    Loading,\r\n    Adding,\r\n    Clearing,\r\n    Removing,\r\n    Updating\r\n}\r\n\r\ninterface TodoState {\r\n    currentAction: TodoAction,\r\n    actionStartTime?: number,\r\n    items:Todo[]\r\n}\r\n\r\ninterface CreateRequest {\r\n    description:string\r\n}\r\n\r\ninterface UpdateRequest {\r\n    id: TodoId,\r\n    description?: string,\r\n    completed?: boolean\r\n}\r\n\r\ninterface RemoveRequest {\r\n    id: TodoId\r\n}\r\n\r\ninterface ClearResult {\r\n    total: TodoId\r\n}\r\n\r\ninterface RemoveResult {\r\n    id: TodoId;\r\n}\r\n\r\nconst initialState = { items: [ ], currentAction: TodoAction.Loading } as TodoState;\r\n\r\n// We create thunks async thinks that will interact with our REST API\r\nexport const getTodos = createApiThunk<Todo[],void>('todos/fetchTodos',api(\"/api/todo\"));\r\nexport const addTodo = createApiThunk<Todo,CreateRequest>('todos/addTodo', api(\"/api/todo\"), Method.POST );\r\nexport const updateTodo = createApiThunk<Todo, UpdateRequest>('todos/updateTodo', api('/api/todo/{id}'), Method.PUT);\r\nexport const clearTodos = createApiThunk<ClearResult,void>('todos/clearTodos', api(\"/api/todo\"), Method.DELETE);\r\nexport const removeTodo = createApiThunk<RemoveResult,RemoveRequest>('todos/removeTodo', api(\"/api/todo/{id}\"), Method.DELETE);\r\n\r\nexport const todos = createSlice({\r\n    name: 'todo',\r\n    initialState,\r\n    reducers: {\r\n    },\r\n    // These are the reducers for the resolution of the Promises create when we attempt to interact with the REST API\r\n    extraReducers : builder => {\r\n        builder.addCase(getTodos.pending, (state) => {\r\n            state.currentAction = TodoAction.Loading;\r\n        });\r\n        builder.addCase(getTodos.fulfilled, (state, action) => {\r\n            state.currentAction = TodoAction.Idle;\r\n            state.items = action.payload;\r\n        });\r\n        builder.addCase(getTodos.rejected, (state) => {\r\n            state.currentAction = TodoAction.Idle;\r\n        });\r\n\r\n        builder.addCase(addTodo.pending, (state) => {\r\n            state.currentAction = TodoAction.Adding;\r\n        });\r\n        builder.addCase(addTodo.fulfilled, (state, action) => {\r\n            state.currentAction = TodoAction.Idle;\r\n            state.items.push(action.payload)\r\n        });\r\n        builder.addCase(addTodo.rejected, (state) => {\r\n            state.currentAction = TodoAction.Idle;\r\n        });\r\n\r\n        builder.addCase(updateTodo.pending, (state,) => {\r\n            state.currentAction = TodoAction.Updating;\r\n        });\r\n        builder.addCase(updateTodo.fulfilled, (state, action) => {\r\n            state.currentAction = TodoAction.Idle;\r\n            let item = state.items.find(i => i.id === action.payload.id);\r\n            if (item) {\r\n                item.description = action.payload.description;\r\n                item.completed = action.payload.completed;\r\n            }\r\n        });\r\n        builder.addCase(updateTodo.rejected, (state) => {\r\n            state.currentAction = TodoAction.Idle;\r\n        });\r\n\r\n        builder.addCase(clearTodos.pending, (state) => {\r\n            state.currentAction = TodoAction.Clearing;\r\n        });\r\n        builder.addCase(clearTodos.fulfilled, (state) => {\r\n            state.currentAction = TodoAction.Idle;\r\n            state.items = [];\r\n        });\r\n        builder.addCase(clearTodos.rejected, (state) => {\r\n            state.currentAction = TodoAction.Idle;\r\n        });\r\n\r\n        builder.addCase(removeTodo.pending, (state) => {\r\n            state.currentAction = TodoAction.Removing;\r\n        });\r\n        builder.addCase(removeTodo.fulfilled, (state, action) => {\r\n            state.currentAction = TodoAction.Idle;\r\n            state.items = state.items.filter(i => i.id !== action.payload.id)\r\n        });\r\n        builder.addCase(removeTodo.rejected, (state, action) => {\r\n            state.currentAction = TodoAction.Idle;\r\n        });\r\n    }\r\n});\r\n\r\nexport default todos.reducer","import {Checkbox, IconButton, ListItem, ListItemIcon, ListItemText} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\"\r\nimport React, {FunctionComponent} from \"react\";\r\nimport {useAppDispatch} from \"../../../hooks\";\r\nimport {removeTodo, updateTodo} from \"../todosSlice\";\r\n\r\ninterface TodoListItemProps {\r\n    id: number,\r\n    description: string,\r\n    completed:boolean,\r\n}\r\n\r\nexport const TodoListItem:FunctionComponent<TodoListItemProps> = (props) => {\r\n    let dispatch = useAppDispatch();\r\n\r\n    const onChange = () => dispatch(updateTodo({ id: props.id, completed: !props.completed}));\r\n    const onRemove = () => dispatch(removeTodo( { id: props.id }));\r\n\r\n    const CloseButton = <IconButton edge=\"end\" aria-label=\"close\" onClick={onRemove}><CloseIcon /></IconButton>;\r\n\r\n    return (\r\n        <ListItem key={props.id} secondaryAction={CloseButton}>\r\n            <ListItemIcon>\r\n            <Checkbox\r\n                edge=\"start\"\r\n                checked={props.completed}\r\n                disableRipple\r\n                onChange={onChange}\r\n            />\r\n            </ListItemIcon>\r\n            <ListItemText primary={props.description} className={props.completed ? \"task-completed\" : \"\"} />\r\n        </ListItem>\r\n    )\r\n}","import React, {FunctionComponent, useEffect} from \"react\";\r\nimport {useAppDispatch, useAppSelector} from \"../../../hooks\";\r\nimport {getTodos, TodoAction} from \"../todosSlice\";\r\nimport {RootState} from \"../../../store\";\r\nimport {TodoListItem} from \"./TodoListItem\";\r\nimport {List, Skeleton} from \"@material-ui/core\";\r\n\r\nexport const TodoList:FunctionComponent = () => {\r\n    const dispatch = useAppDispatch();\r\n    const items = useAppSelector((state: RootState) => state.todos.items);\r\n    const currentAction = useAppSelector((state: RootState) => state.todos.currentAction);\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodos());\r\n    }, [dispatch])\r\n\r\n    // Either show a The todos list, the \"No Todos\" message or a loading skeleton, depending on the state of things.\r\n    let list;\r\n    if (currentAction === TodoAction.Loading) {\r\n        list = <Skeleton variant=\"rectangular\" width=\"100%\" />;\r\n    } else {\r\n        if (items.length > 0) {\r\n            list = <List disablePadding>{items.map(item => <TodoListItem key={item.id} id={item.id} description={item.description}\r\n                                                          completed={item.completed}/>)}</List>\r\n        } else {\r\n            list = <div className=\"empty-list\">No Todos</div>\r\n        }\r\n    }\r\n\r\n    return list;\r\n}","import React, {FunctionComponent, useRef, useState} from \"react\";\r\nimport {useAppDispatch, useAppSelector, useFormInput} from \"../../../hooks\";\r\nimport {addTodo, TodoAction} from \"../todosSlice\";\r\nimport {RootState} from \"../../../store\";\r\nimport LoadingButton from '@material-ui/lab/LoadingButton';\r\nimport {Grid, TextField} from \"@material-ui/core\";\r\n\r\nexport const NewTodoInput:FunctionComponent<any> = () => {\r\n    let dispatch = useAppDispatch();\r\n    const [hasError, setHasError] = useState(false);\r\n    let description = useFormInput(\"\", onSubmit);\r\n    const formRef = useRef<HTMLFormElement>(null);\r\n    const currentAction = useAppSelector( (state:RootState) => state.todos.currentAction);\r\n\r\n    function onSubmit() {\r\n        if (formRef?.current?.checkValidity() === true) {\r\n            setHasError(false);\r\n            dispatch(addTodo({description: description.value}));\r\n            description.set(\"\");\r\n        } else {\r\n            setHasError(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={1} justifyContent=\"center\">\r\n            <Grid item xs=\"auto\" >\r\n                <TextField\r\n                    inputRef={formRef}\r\n                    id=\"standard-basic\"\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    required\r\n                    helperText=\"Enter task description\"\r\n                    error={hasError}\r\n                    {...description.bind}/>\r\n            </Grid>\r\n            <Grid item xs=\"auto\" >\r\n                <LoadingButton\r\n                    onClick={onSubmit}\r\n                    loading={currentAction === TodoAction.Adding}\r\n                    variant=\"contained\"\r\n                >\r\n                    Add\r\n                </LoadingButton>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n","import React, {FunctionComponent, useState} from \"react\";\r\nimport {TodoList} from \"./TodoList\";\r\nimport {NewTodoInput} from \"./NewTodoInput\";\r\nimport {RootState} from \"../../../store\";\r\nimport {useAppDispatch, useAppSelector} from \"../../../hooks\";\r\nimport {clearTodos} from \"../todosSlice\";\r\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\r\n\r\nimport {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    Divider,\r\n    Fab,\r\n    Grid\r\n} from \"@material-ui/core\";\r\n\r\nexport const Todo:FunctionComponent<any> = () => {\r\n    const dispatch = useAppDispatch();\r\n    const todoCount = useAppSelector( (state:RootState) => state.todos.items.length );\r\n    const [showConfirmDeleteDialog, setShowConfirmDeleteDialog] = useState(false);\r\n\r\n    const confirmClearTodoHandler = () => {\r\n        setShowConfirmDeleteDialog(true);\r\n    }\r\n\r\n    const clearTodoHandler = () => {\r\n        setShowConfirmDeleteDialog(false);\r\n        dispatch(clearTodos());\r\n    }\r\n\r\n    const cancelClearTodoHandler = () => {\r\n        setShowConfirmDeleteDialog(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Box minWidth={\"sm\"}>\r\n            <Card >\r\n                <Grid container p={2} justifyContent=\"flex-end\" spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <NewTodoInput/>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Divider/>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TodoList/>\r\n                    </Grid>\r\n                    { todoCount > 0 ? <>\r\n                            <Grid item xs={12}>\r\n                                <Divider/>\r\n                            </Grid>\r\n                            <Grid item >\r\n                                <Fab color=\"secondary\" aria-label=\"delete all\" onClick={confirmClearTodoHandler}>\r\n                                    <DeleteForeverIcon />\r\n                                </Fab>\r\n                            </Grid>\r\n                            </>\r\n                        : <></>\r\n                    }\r\n                </Grid>\r\n            </Card>\r\n        </Box>\r\n        <Dialog\r\n            open={showConfirmDeleteDialog}\r\n            onClose={cancelClearTodoHandler}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">Clear Todos</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\">\r\n                    Are you sure you want to clear ALL todos?\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={cancelClearTodoHandler} color=\"primary\" autoFocus>\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={clearTodoHandler} color=\"primary\">\r\n                    Clear\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n    );\r\n}","import React, {FunctionComponent} from \"react\"\r\nimport {Todo} from \"../../todos/components/Todo\";\r\n\r\nexport const Sidebar:FunctionComponent = () => {\r\n    return <div><Todo/></div>\r\n}","import {createSlice} from \"@reduxjs/toolkit\";\r\nimport {addTodo, clearTodos, getTodos, removeTodo, updateTodo} from \"../todos/todosSlice\";\r\n\r\nlet errorId = 0;\r\n\r\nexport interface Error {\r\n    id: number,\r\n    description: string\r\n}\r\n\r\ninterface CommonState {\r\n    errors: Error[]\r\n}\r\n\r\nconst initialState = { errors: [] } as CommonState;\r\n\r\nexport const common = createSlice({\r\n    name: 'common',\r\n    initialState,\r\n    reducers: {\r\n        clearError: (state, action) => {\r\n            state.errors = state.errors.filter( error => error.id !== action.payload)\r\n        }\r\n    },\r\n    // Here we hook into the reducers associated with the rejection of todo api request promises,\r\n    // allowing us to display an error message to the user.\r\n    extraReducers: builder => {\r\n        builder.addCase(getTodos.rejected, (state) => {\r\n            state.errors.push({ id: ++errorId, description: \"Unable to load Todos\" });\r\n        });\r\n        builder.addCase(addTodo.rejected, (state) => {\r\n            state.errors.push({ id: ++errorId, description: \"Unable to add Todo\" });\r\n        });\r\n        builder.addCase(removeTodo.rejected, (state) => {\r\n            state.errors.push({ id: ++errorId, description: \"Unable to remove Todo\" });\r\n        });\r\n        builder.addCase(clearTodos.rejected, (state) => {\r\n            state.errors.push({ id: ++errorId, description: \"Unable to clear Todos\" });\r\n        });\r\n        builder.addCase(updateTodo.rejected, (state) => {\r\n            state.errors.push({ id: ++errorId, description: \"Unable to update Todos\" });\r\n        });\r\n    }\r\n});\r\n\r\nexport const { clearError } = common.actions;\r\nexport default common.reducer","import React, {FunctionComponent, useEffect, useState} from \"react\"\r\nimport {RootState} from \"../../../store\";\r\nimport {useAppDispatch, useAppSelector} from \"../../../hooks\";\r\nimport {clearError, Error} from \"../commonSlice\";\r\nimport {Alert, Snackbar} from \"@material-ui/core\";\r\n\r\nexport const Errors:FunctionComponent = () => {\r\n    const dispatch = useAppDispatch();\r\n    const errors = useAppSelector( (state:RootState) => state.common.errors);\r\n    const errorCount = useAppSelector( (state:RootState) => state.common.errors.length);\r\n    const [errorInfo, setErrorInfo] = useState<Error | undefined>(undefined);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // If there's an error, we display it then dispatch an action to clear it from\r\n        // the common errors list.\r\n        if (errorCount > 0 && !errorInfo) {\r\n            setErrorInfo({ ...errors[0]});\r\n            dispatch(clearError(errors[0].id));\r\n            setOpen(true);\r\n        } else if (errorCount > 0 && errorInfo && open) {\r\n            // if there's currently an error being shown and we have a new one, we close the current one first\r\n            setOpen(false);\r\n        }\r\n    },[dispatch, errorCount, errors, errorInfo, open]);\r\n\r\n    const closeErrorHandler = (event?: React.SyntheticEvent, reason?: string) => {\r\n        // Disable clicking auto-closing\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    // we don't clear the error info until after the transition animation has finished to prevent\r\n    // the data from being cleared mid-animation.\r\n    const handleExited = () => {\r\n        setErrorInfo(undefined);\r\n    }\r\n\r\n    return (\r\n        <Snackbar\r\n            open={open}\r\n            onClose={closeErrorHandler}\r\n            autoHideDuration={6000}\r\n            TransitionProps={{ onExited: handleExited }}\r\n            anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\"}}\r\n        >\r\n            <Alert onClose={closeErrorHandler} severity=\"error\" variant=\"filled\">{errorInfo?.description}</Alert>\r\n        </Snackbar>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Header} from \"./features/common/components/Header\";\r\nimport {Main} from \"./features/common/components/Main\"\r\nimport {Sidebar} from \"./features/common/components/Sidebar\"\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {Errors} from \"./features/common/components/Errors\";\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <Header/>\r\n                </Grid>\r\n                <Grid item xs={12} >\r\n                    <Grid container>\r\n                        <Grid item xs={12} md={3}>\r\n                            <Sidebar/>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Main/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Errors/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit'\r\nimport todoReducer from \"./features/todos/todosSlice\";\r\nimport commonReducer from \"./features/common/commonSlice\"\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        common: commonReducer,\r\n        todos: todoReducer\r\n    },\r\n    middleware: getDefaultMiddleware(), // includes thunk\r\n    devTools: true\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store\";\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}